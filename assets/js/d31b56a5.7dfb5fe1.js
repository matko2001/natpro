"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1305],{3905:(a,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>N});var n=t(7294);function m(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function r(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function o(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){m(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function s(a,e){if(null==a)return{};var t,n,m=function(a,e){if(null==a)return{};var t,n,m={},r=Object.keys(a);for(n=0;n<r.length;n++)t=r[n],e.indexOf(t)>=0||(m[t]=a[t]);return m}(a,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(a);for(n=0;n<r.length;n++)t=r[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(m[t]=a[t])}return m}var p=n.createContext({}),i=function(a){var e=n.useContext(p),t=e;return a&&(t="function"==typeof a?a(e):o(o({},e),a)),t},l=function(a){var e=i(a.components);return n.createElement(p.Provider,{value:e},a.children)},c="mdxType",k={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(a,e){var t=a.components,m=a.mdxType,r=a.originalType,p=a.parentName,l=s(a,["components","mdxType","originalType","parentName"]),c=i(t),u=m,N=c["".concat(p,".").concat(u)]||c[u]||k[u]||r;return t?n.createElement(N,o(o({ref:e},l),{},{components:t})):n.createElement(N,o({ref:e},l))}));function N(a,e){var t=arguments,m=e&&e.mdxType;if("string"==typeof a||m){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=a,s[c]="string"==typeof a?a:m,o[1]=s;for(var i=2;i<r;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},903:(a,e,t)=>{t.d(e,{Z:()=>m});var n=t(7294);const m=a=>{let{authorName:e,githubUsername:t}=a;return n.createElement("div",{className:"author"},"Autor: ",n.createElement("a",{target:"_blank",href:"https://github.com/"+t},e))}},5884:(a,e,t)=>{t.d(e,{Z:()=>r});var n=t(7294);const{useState:m}=n,r=a=>{let{text:e}=a;const[t,r]=m(!1);return n.createElement("span",{onClick:()=>r(!t),className:"react-spoiler-"+(t?"shown":"hidden")},e)}},3702:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=t(7462),m=(t(7294),t(3905)),r=t(903);t(5884);const o={title:"Kosarajuev algoritam"},s=void 0,p={unversionedId:"algoritmi-nad-grafovima-2/kosarajuev-algoritam",id:"algoritmi-nad-grafovima-2/kosarajuev-algoritam",title:"Kosarajuev algoritam",description:"Definicija",source:"@site/docs/algoritmi-nad-grafovima-2/kosarajuev-algoritam.md",sourceDirName:"algoritmi-nad-grafovima-2",slug:"/algoritmi-nad-grafovima-2/kosarajuev-algoritam",permalink:"/docs/algoritmi-nad-grafovima-2/kosarajuev-algoritam",draft:!1,editUrl:"https://github.com/x-fer/natpro/edit/main/docs/algoritmi-nad-grafovima-2/kosarajuev-algoritam.md",tags:[],version:"current",frontMatter:{title:"Kosarajuev algoritam"},sidebar:"materijaliSidebar",previous:{title:"Topolo\u0161ko sortiranje",permalink:"/docs/algoritmi-nad-grafovima-2/topolosko-sortiranje"},next:{title:"2SAT",permalink:"/docs/algoritmi-nad-grafovima-2/2SAT"}},i={},l=[{value:"Definicija",id:"definicija",level:3},{value:"Algoritam",id:"algoritam",level:3},{value:"Implementacija",id:"implementacija",level:3},{value:"Odnosi izme\u0111u strogo povezanih komponenata",id:"odnosi-izme\u0111u-strogo-povezanih-komponenata",level:3}],c={toc:l},k="wrapper";function u(a){let{components:e,...o}=a;return(0,m.kt)(k,(0,n.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,m.kt)(r.Z,{authorName:"Martin Josip Kocijan",githubUsername:"kocijan",mdxType:"Author"}),(0,m.kt)("h3",{id:"definicija"},"Definicija"),(0,m.kt)("p",null,"Za neki usmjereni graf ka\u017eemo da je ",(0,m.kt)("strong",{parentName:"p"},"strogo povezan")," (engl. ",(0,m.kt)("em",{parentName:"p"},"strongly connected"),") ako postoji put izme\u0111u svaka dva vrha. Ako su ",(0,m.kt)("em",{parentName:"p"},"u")," i ",(0,m.kt)("em",{parentName:"p"},"v")," razli\u010diti vrhovi, tada postoji put od ",(0,m.kt)("em",{parentName:"p"},"u")," do ",(0,m.kt)("em",{parentName:"p"},"v")," te postoji put od ",(0,m.kt)("em",{parentName:"p"},"v")," do ",(0,m.kt)("em",{parentName:"p"},"u"),"."),(0,m.kt)("p",null,"Usmjerene grafove mo\u017eemo rastaviti na disjunktne ",(0,m.kt)("strong",{parentName:"p"},"strogo povezane komponente")," (engl. ",(0,m.kt)("em",{parentName:"p"},"strongly connected components"),") gdje je svaka komponenta neki podgraf koji je strogo povezan."),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"Primjer strogo povezanih komponenata u usmjerenom grafu",src:t(8640).Z,width:"2560",height:"1212"})),(0,m.kt)("p",null,"Na slici je primjer usmjerenog grafa kojem su ozna\u010dene njegove strogo povezane komponente. One su ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\{a, b, e\\}")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"}"))))),", ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"h"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\{c, d, h\\}")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"h"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"}")))))," i ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\{f, g\\}")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"}"))))),"."),(0,m.kt)("h3",{id:"algoritam"},"Algoritam"),(0,m.kt)("p",null,"Kosarajuev algoritam zapo\u010dinje topolo\u0161kim sortiranjem vrhova usmjerenog grafa. Nakon toga pronalazimo strogo povezane komponente."),(0,m.kt)("p",null,"Potrebno je napisati dva DFS-a. Prvi slu\u017ei za generiranje topolo\u0161kog poretka koji spremamo u neku listu. Zatim prvo promijenimo smjer svim bridovima u grafu. Prema prethodno dobivenom topolo\u0161kom poretku nekom \u010dvoru ",(0,m.kt)("em",{parentName:"p"},"x")," u njegovu komponentu rekurzivno pridru\u017eujemo sve \u010dvorove do kojih postoji put od ",(0,m.kt)("em",{parentName:"p"},"x"),". Preciznije, u glavnom programu petljom prolazimo po svim \u010dvorovima ",(0,m.kt)("em",{parentName:"p"},"u")," prema topolo\u0161kom poretku. Za svaki \u010dvor ",(0,m.kt)("em",{parentName:"p"},"u")," zovemo ",(0,m.kt)("inlineCode",{parentName:"p"},"dfs2(u, u)"),". Rekurzija ",(0,m.kt)("inlineCode",{parentName:"p"},"dfs2(x, y)")," prvo provjerava je li \u010dvoru ",(0,m.kt)("em",{parentName:"p"},"x")," ve\u0107 obra\u0111en, odnosno je li mu ve\u0107 pridru\u017eena neka komponenta. Ako nije, \u010dvor ",(0,m.kt)("em",{parentName:"p"},"x")," pridru\u017euje se onoj komponenti u kojoj je ve\u0107 ",(0,m.kt)("em",{parentName:"p"},"y"),". Nakon toga u rekurziji prolazimo petljom po svim susjedima ",(0,m.kt)("em",{parentName:"p"},"v")," od ",(0,m.kt)("em",{parentName:"p"},"x")," te zovemo ",(0,m.kt)("inlineCode",{parentName:"p"},"dfs2(v, y)"),"."),(0,m.kt)("p",null,"Algoritam je linearne slo\u017eenosti, odnosno ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"M"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N+M)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))),". "),(0,m.kt)("h3",{id:"implementacija"},"Implementacija"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <stack>\n#include <vector>\n#include <cstring>\nusing namespace std;\n#define N 200200\n \nint n, m;\nint u, v;\nvector<int> g[N];\n// ako imamo matricu susjedstva, mo\u017eemo dobiti inverz i tako da ju transponiramo\nvector<int> g_inv[N];\nint bio[N];\nstack<int> topo;\n// ovdje zapisujemo rje\u0161enje, tako da su dva vrha x i y u istoj komponenti ako je comp[x] == comp[y]\n// mogli smo rje\u0161enje zapisati i u bio[] samo treba paziti na brojeve koji ozna\u010davaju komponente i broj koji ozna\u010dava neposje\u0107eni \u010dvor\nint comp[N];\n \nvoid dfs1(int cv)\n{\n  if (bio[cv]) return;\n  bio[cv] = 1;\n  for (int i: g[cv]) {\n    dfs1(i);\n  }\n  topo.push(cv);\n}\n \nvoid dfs2(int cv, int root)\n{\n  if (bio[cv]) return;\n  bio[cv] = 1;\n  // comp[cv] = comp[root]\n  comp[cv] = root;\n  // svim bridovima trebamo zamijeniti smjer pa nas ne zanimaju izlazni nego ulazni bridovi\n  for (int i: g_inv[cv]) {\n    dfs2(i, root);\n  }\n}\n \nint main()\n{\n  scanf("%d%d", &n, &m);\n  for (int i = 0; i < m; i++) {\n    scanf("%d%d", &u, &v);\n    // zapisujemo da \u010dvor u ima izlazni brid prema v\n    g[u].pb(v);\n    // zapisujemo da \u010dvor v ima ulazni brid iz u\n    g_inv[v].pb(u);\n  }\n  for (int i = 0; i < n; i++) {\n    dfs1(i);\n  }\n  // mo\u017eemo reciklirati polje bio[]\n  memset(bio, 0, sizeof bio);\n  for (int i = 0; i < n; i++) {\n    int cv = topo.top();\n    topo.pop();\n    dfs2(cv, cv);\n  }\n  // za svaki \u010dvor ispisujemo kojoj komponenti on pripada\n  // vrijedi comp[x] == comp[y] ako i samo ako se x i y nalaze u istoj strogo povezanoj komponenti\n  for (int i = 0; i < n; i++) {\n    printf("%d\\n", comp[i]);\n  }\n  return 0;\n}\n')),(0,m.kt)("h3",{id:"odnosi-izme\u0111u-strogo-povezanih-komponenata"},"Odnosi izme\u0111u strogo povezanih komponenata"),(0,m.kt)("p",null,"Svaki usmjereni graf mo\u017eemo kondenzirati u usmjereni graf bez ciklusa tako da svaku njegovu strogo povezanu komponentu stegnemo u jedan vrh."),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"Primjer kondenzacije strogo povezanih komponenata u nekom usmjerenom grafu",src:t(7441).Z,width:"2560",height:"1607"})),(0,m.kt)("p",null,"Na slici je primjer kondenzacije plavog usmjerenog grafa u \u017euti. Dok plavi ima cikluse, \u017euti ih nema. Svaka strogo povezana komponenta plavog grafa predstavljena je jednim \u017eutim vrhom. Ako iz nekog vrha u jednoj plavoj komponenti postoji brid prema nekom vrhu u drugoj komponenti, postoji i brid izme\u0111u odgovaraju\u0107ih \u017eutih vrhova."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},'for (int i = 0; i < n; i++) {\n    for (int j: g[i]) {\n      if (comp[i] != comp[j]) {\n        printf("Postoji brid iz cvora %d komponente %d prema cvoru %d komponente %d\\n", i, comp[i], j, comp[j]);\n      }\n    }\n  }\n')))}u.isMDXComponent=!0},8640:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/Scc-1-d9c7a93f044576fc40c79e14f093ada5.png"},7441:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/kondenzacija-0573f7490e17f03cdbc07f16d0c88537.png"}}]);