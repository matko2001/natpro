"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1305],{3905:function(a,e,n){n.d(e,{Zo:function(){return l},kt:function(){return u}});var t=n(7294);function r(a,e,n){return e in a?Object.defineProperty(a,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[e]=n,a}function o(a,e){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(a);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.push.apply(n,t)}return n}function m(a){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(a,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(n,e))}))}return a}function i(a,e){if(null==a)return{};var n,t,r=function(a,e){if(null==a)return{};var n,t,r={},o=Object.keys(a);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||(r[n]=a[n]);return r}(a,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(a);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(a,n)&&(r[n]=a[n])}return r}var s=t.createContext({}),p=function(a){var e=t.useContext(s),n=e;return a&&(n="function"==typeof a?a(e):m(m({},e),a)),n},l=function(a){var e=p(a.components);return t.createElement(s.Provider,{value:e},a.children)},c={inlineCode:"code",wrapper:function(a){var e=a.children;return t.createElement(t.Fragment,{},e)}},k=t.forwardRef((function(a,e){var n=a.components,r=a.mdxType,o=a.originalType,s=a.parentName,l=i(a,["components","mdxType","originalType","parentName"]),k=p(n),u=r,N=k["".concat(s,".").concat(u)]||k[u]||c[u]||o;return n?t.createElement(N,m(m({ref:e},l),{},{components:n})):t.createElement(N,m({ref:e},l))}));function u(a,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof a||r){var o=n.length,m=new Array(o);m[0]=k;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=a,i.mdxType="string"==typeof a?a:r,m[1]=i;for(var p=2;p<o;p++)m[p]=n[p];return t.createElement.apply(null,m)}return t.createElement.apply(null,n)}k.displayName="MDXCreateElement"},903:function(a,e,n){var t=n(7294);e.Z=function(a){var e=a.authorName,n=a.githubUsername;return t.createElement("div",{className:"author"},"Autor: ",t.createElement("a",{target:"_blank",href:"https://github.com/"+n},e))}},5884:function(a,e,n){var t=n(7294),r=t.useState;e.Z=function(a){var e=a.text,n=r(!1),o=n[0],m=n[1];return t.createElement("span",{onClick:function(){return m(!o)},className:"react-spoiler-"+(o?"shown":"hidden")},e)}},3702:function(a,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var t=n(7462),r=n(3366),o=(n(7294),n(3905)),m=n(903),i=(n(5884),["components"]),s={title:"Kosarajuev algoritam"},p=void 0,l={unversionedId:"algoritmi-nad-grafovima-2/kosarajuev-algoritam",id:"algoritmi-nad-grafovima-2/kosarajuev-algoritam",title:"Kosarajuev algoritam",description:"Definicija",source:"@site/docs/algoritmi-nad-grafovima-2/kosarajuev-algoritam.md",sourceDirName:"algoritmi-nad-grafovima-2",slug:"/algoritmi-nad-grafovima-2/kosarajuev-algoritam",permalink:"/docs/algoritmi-nad-grafovima-2/kosarajuev-algoritam",editUrl:"https://github.com/x-fer/natpro/edit/main/docs/algoritmi-nad-grafovima-2/kosarajuev-algoritam.md",tags:[],version:"current",frontMatter:{title:"Kosarajuev algoritam"},sidebar:"materijaliSidebar",previous:{title:"Topolo\u0161ko sortiranje",permalink:"/docs/algoritmi-nad-grafovima-2/topolosko-sortiranje"},next:{title:"2SAT",permalink:"/docs/algoritmi-nad-grafovima-2/2SAT"}},c=[{value:"Definicija",id:"definicija",children:[],level:3},{value:"Algoritam",id:"algoritam",children:[],level:3},{value:"Implementacija",id:"implementacija",children:[],level:3},{value:"Odnosi izme\u0111u strogo povezanih komponenata",id:"odnosi-izme\u0111u-strogo-povezanih-komponenata",children:[],level:3}],k={toc:c};function u(a){var e=a.components,s=(0,r.Z)(a,i);return(0,o.kt)("wrapper",(0,t.Z)({},k,s,{components:e,mdxType:"MDXLayout"}),(0,o.kt)(m.Z,{authorName:"Martin Josip Kocijan",githubUsername:"kocijan",mdxType:"Author"}),(0,o.kt)("h3",{id:"definicija"},"Definicija"),(0,o.kt)("p",null,"Za neki usmjereni graf ka\u017eemo da je ",(0,o.kt)("strong",{parentName:"p"},"strogo povezan")," (engl. ",(0,o.kt)("em",{parentName:"p"},"strongly connected"),") ako postoji put izme\u0111u svaka dva vrha. Ako su ",(0,o.kt)("em",{parentName:"p"},"u")," i ",(0,o.kt)("em",{parentName:"p"},"v")," razli\u010diti vrhovi, tada postoji put od ",(0,o.kt)("em",{parentName:"p"},"u")," do ",(0,o.kt)("em",{parentName:"p"},"v")," te postoji put od ",(0,o.kt)("em",{parentName:"p"},"v")," do ",(0,o.kt)("em",{parentName:"p"},"u"),"."),(0,o.kt)("p",null,"Usmjerene grafove mo\u017eemo rastaviti na disjunktne ",(0,o.kt)("strong",{parentName:"p"},"strogo povezane komponente")," (engl. ",(0,o.kt)("em",{parentName:"p"},"strongly connected components"),") gdje je svaka komponenta neki podgraf koji je strogo povezan."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Primjer strogo povezanih komponenata u usmjerenom grafu",src:n(6189).Z,width:"2560",height:"1212"})),(0,o.kt)("p",null,"Na slici je primjer usmjerenog grafa kojem su ozna\u010dene njegove strogo povezane komponente. One su ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,o.kt)("mi",{parentName:"mrow"},"a"),(0,o.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,o.kt)("mi",{parentName:"mrow"},"b"),(0,o.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,o.kt)("mi",{parentName:"mrow"},"e"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\{a, b, e\\}")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,o.kt)("span",{parentName:"span",className:"mpunct"},","),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,o.kt)("span",{parentName:"span",className:"mpunct"},","),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,o.kt)("span",{parentName:"span",className:"mclose"},"}"))))),", ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,o.kt)("mi",{parentName:"mrow"},"c"),(0,o.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,o.kt)("mi",{parentName:"mrow"},"d"),(0,o.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,o.kt)("mi",{parentName:"mrow"},"h"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\{c, d, h\\}")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,o.kt)("span",{parentName:"span",className:"mpunct"},","),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,o.kt)("span",{parentName:"span",className:"mpunct"},","),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"h"),(0,o.kt)("span",{parentName:"span",className:"mclose"},"}")))))," i ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,o.kt)("mi",{parentName:"mrow"},"f"),(0,o.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,o.kt)("mi",{parentName:"mrow"},"g"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\{f, g\\}")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,o.kt)("span",{parentName:"span",className:"mpunct"},","),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,o.kt)("span",{parentName:"span",className:"mclose"},"}"))))),"."),(0,o.kt)("h3",{id:"algoritam"},"Algoritam"),(0,o.kt)("p",null,"Kosarajuev algoritam zapo\u010dinje topolo\u0161kim sortiranjem vrhova usmjerenog grafa. Nakon toga pronalazimo strogo povezane komponente."),(0,o.kt)("p",null,"Potrebno je napisati dva DFS-a. Prvi slu\u017ei za generiranje topolo\u0161kog poretka koji spremamo u neku listu. Zatim prvo promijenimo smjer svim bridovima u grafu. Prema prethodno dobivenom topolo\u0161kom poretku nekom \u010dvoru ",(0,o.kt)("em",{parentName:"p"},"x")," u njegovu komponentu rekurzivno pridru\u017eujemo sve \u010dvorove do kojih postoji put od ",(0,o.kt)("em",{parentName:"p"},"x"),". Preciznije, u glavnom programu petljom prolazimo po svim \u010dvorovima ",(0,o.kt)("em",{parentName:"p"},"u")," prema topolo\u0161kom poretku. Za svaki \u010dvor ",(0,o.kt)("em",{parentName:"p"},"u")," zovemo ",(0,o.kt)("inlineCode",{parentName:"p"},"dfs2(u, u)"),". Rekurzija ",(0,o.kt)("inlineCode",{parentName:"p"},"dfs2(x, y)")," prvo provjerava je li \u010dvoru ",(0,o.kt)("em",{parentName:"p"},"x")," ve\u0107 obra\u0111en, odnosno je li mu ve\u0107 pridru\u017eena neka komponenta. Ako nije, \u010dvor ",(0,o.kt)("em",{parentName:"p"},"x")," pridru\u017euje se onoj komponenti u kojoj je ve\u0107 ",(0,o.kt)("em",{parentName:"p"},"y"),". Nakon toga u rekurziji prolazimo petljom po svim susjedima ",(0,o.kt)("em",{parentName:"p"},"v")," od ",(0,o.kt)("em",{parentName:"p"},"x")," te zovemo ",(0,o.kt)("inlineCode",{parentName:"p"},"dfs2(v, y)"),"."),(0,o.kt)("p",null,"Algoritam je linearne slo\u017eenosti, odnosno ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"N"),(0,o.kt)("mo",{parentName:"mrow"},"+"),(0,o.kt)("mi",{parentName:"mrow"},"M"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N+M)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,o.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")"))))),". "),(0,o.kt)("h3",{id:"implementacija"},"Implementacija"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <stack>\n#include <vector>\n#include <cstring>\nusing namespace std;\n#define N 200200\n \nint n, m;\nint u, v;\nvector<int> g[N];\n// ako imamo matricu susjedstva, mo\u017eemo dobiti inverz i tako da ju transponiramo\nvector<int> g_inv[N];\nint bio[N];\nstack<int> topo;\n// ovdje zapisujemo rje\u0161enje, tako da su dva vrha x i y u istoj komponenti ako je comp[x] == comp[y]\n// mogli smo rje\u0161enje zapisati i u bio[] samo treba paziti na brojeve koji ozna\u010davaju komponente i broj koji ozna\u010dava neposje\u0107eni \u010dvor\nint comp[N];\n \nvoid dfs1(int cv)\n{\n  if (bio[cv]) return;\n  bio[cv] = 1;\n  for (int i: g[cv]) {\n    dfs1(i);\n  }\n  topo.push(cv);\n}\n \nvoid dfs2(int cv, int root)\n{\n  if (bio[cv]) return;\n  bio[cv] = 1;\n  // comp[cv] = comp[root]\n  comp[cv] = root;\n  // svim bridovima trebamo zamijeniti smjer pa nas ne zanimaju izlazni nego ulazni bridovi\n  for (int i: g_inv[cv]) {\n    dfs2(i, root);\n  }\n}\n \nint main()\n{\n  scanf("%d%d", &n, &m);\n  for (int i = 0; i < m; i++) {\n    scanf("%d%d", &u, &v);\n    // zapisujemo da \u010dvor u ima izlazni brid prema v\n    g[u].pb(v);\n    // zapisujemo da \u010dvor v ima ulazni brid iz u\n    g_inv[v].pb(u);\n  }\n  for (int i = 0; i < n; i++) {\n    dfs1(i);\n  }\n  // mo\u017eemo reciklirati polje bio[]\n  memset(bio, 0, sizeof bio);\n  for (int i = 0; i < n; i++) {\n    int cv = topo.top();\n    topo.pop();\n    dfs2(cv, cv);\n  }\n  // za svaki \u010dvor ispisujemo kojoj komponenti on pripada\n  // vrijedi comp[x] == comp[y] ako i samo ako se x i y nalaze u istoj strogo povezanoj komponenti\n  for (int i = 0; i < n; i++) {\n    printf("%d\\n", comp[i]);\n  }\n  return 0;\n}\n')),(0,o.kt)("h3",{id:"odnosi-izme\u0111u-strogo-povezanih-komponenata"},"Odnosi izme\u0111u strogo povezanih komponenata"),(0,o.kt)("p",null,"Svaki usmjereni graf mo\u017eemo kondenzirati u usmjereni graf bez ciklusa tako da svaku njegovu strogo povezanu komponentu stegnemo u jedan vrh."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Primjer kondenzacije strogo povezanih komponenata u nekom usmjerenom grafu",src:n(786).Z,width:"2560",height:"1607"})),(0,o.kt)("p",null,"Na slici je primjer kondenzacije plavog usmjerenog grafa u \u017euti. Dok plavi ima cikluse, \u017euti ih nema. Svaka strogo povezana komponenta plavog grafa predstavljena je jednim \u017eutim vrhom. Ako iz nekog vrha u jednoj plavoj komponenti postoji brid prema nekom vrhu u drugoj komponenti, postoji i brid izme\u0111u odgovaraju\u0107ih \u017eutih vrhova."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'for (int i = 0; i < n; i++) {\n    for (int j: g[i]) {\n      if (comp[i] != comp[j]) {\n        printf("Postoji brid iz cvora %d komponente %d prema cvoru %d komponente %d\\n", i, comp[i], j, comp[j]);\n      }\n    }\n  }\n')))}u.isMDXComponent=!0},6189:function(a,e,n){e.Z=n.p+"assets/images/Scc-1-d9c7a93f044576fc40c79e14f093ada5.png"},786:function(a,e,n){e.Z=n.p+"assets/images/kondenzacija-0573f7490e17f03cdbc07f16d0c88537.png"}}]);